package rewards.web;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

// TODO 03: Mark this as a configuration class
// Save all work and restart the server.  You should be able to access the homepage,
// but you should see a 404 when going to the "Account List" page.
@Configuration
public class RewardsWebSecurityConfig extends WebSecurityConfigurerAdapter {

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		// TODO 04: Set the login page (below) so it uses '/login'.
		/*
		 * Go to the "Account List" page again. You should now be taken to the login
		 * page.
		 * 
		 * Try to log in using an incorrect user/password such as 'foo', 'foo'. Note
		 * that the you are sent back to the login page with a friendly message.
		 * 
		 * Take a look at login.jsp to see if you understand how the page displays the
		 * error message in response to a bad userid or password. What made the '/login'
		 * URL be mapped to '/WEB-INF/views/login.jsp'?
		 * 
		 * Go to next step when ready.
		 */

		/*
		 * TODO 05: Check the username/password of the user defined in configureGlobal
		 * (below) and use it to log into the application.
		 *
		 * However this user is NOT allowed to access the 'Account List' page yet. After
		 * log in, you SHOULD expect to see the access denied page - set this to be
		 * '/denied' below.
		 */

		http.formLogin().loginPage("/login").permitAll() // Unrestricted access to the login page
				.and().exceptionHandling().accessDeniedPage("/denied").and()

				/*
				 * TODO 06: As defined below, users with role ADMIN can already access GET
				 * '/accounts/*'. Update the configuration so users with role USER can ALSO
				 * access that same URL pattern. After completing this task, re-deploy the web
				 * application. Login as user 'joe' and you should now be able to access the
				 * account list and account details. However trying to Edit the Account again
				 * causes an Access Denied error because joe is not an ADMIN.
				 */

				.authorizeRequests().antMatchers(HttpMethod.GET, "/accounts").hasRole("USER")
				.antMatchers(HttpMethod.GET, "/accounts/*").hasRole("ADMIN").antMatchers("/accounts/**")
				.hasRole("ADMIN").and().logout().permitAll().logoutSuccessUrl("/");
	}

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
		/*
		 * TODO 07: Add a user admin/spring with role 'USER' and 'ADMIN' (hint, use the
		 * and() method).
		 *
		 * Save and restart the web application. If you don't see the login form, log
		 * out from the application by clicking on the "log out" link. You can now log
		 * in with the user 'admin'. Once logged in, click one of the links to reach the
		 * account details page, then click the "Edit account" link. You will be able to
		 * edit account details. Try to log in again using 'joe' and double-check that
		 * 'joe', who only has 'USER' rights, is still not allowed to edit account
		 * information.
		 *
		 */
		auth.inMemoryAuthentication().withUser("joe").password("spring").roles("USER");
	}

}
